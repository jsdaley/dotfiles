;; -*- mode: emacs-lisp -*-

;; note: in order for flyspell to work, aspell must be installed
;; $ brew install aspell --lang=en
;; NOTE: still having issues with flyspell -- need to investigate

(require 'package)
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/") t)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)
(package-initialize)

(when (not package-archive-contents)
  (package-refresh-contents))

(defvar my-packages '(starter-kit
                      color-theme-sanityinc-solarized
                      coffee-mode
                      gist
                      evil
                      markdown-mode
                      mustache-mode
                      slime
                      slime-js
                      slime-repl
                      evil-leader
                      )
  "A list of packages to ensure are installed at launch.")

(setq evil-leader/leader ";"
            evil-leader/in-all-states t)
(require 'evil-leader)
(require 'evil)
(evil-mode 1)

(dolist (p my-packages)
  (when (not (package-installed-p p))
    (package-install p)))

(load-theme 'solarized-dark t)

;; make system keyboard work
(setq x-select-enable-clipboard t)

;; Set PATH (read in from login shell).
;; - http://stackoverflow.com/a/2566945
;; (when (equal system-type 'darwin) (set-exec-path-from-shell-PATH))

;; start a single emacs server
(server-start)

;; Enable mouse support in terminal.
(require 'mouse)
(xterm-mouse-mode t)
(global-set-key [mouse-4] '(lambda ()
                            (interactive)
                            (scroll-down 1)))
(global-set-key [mouse-5] '(lambda ()
                            (interactive)
                            (scroll-up 1)))
(defun track-mouse (e))
(setq mouse-sel-mode t)

;; Enable cua mode, but only for rectangles.
;; (C-RET will start a rectangular selection.)
(setq cua-enable-cua-keys nil)
(cua-mode t)

;; Display ido results vertically, rather than horizontally.
(setq ido-decorations (quote ("\n-> " "" "\n   " "\n   ..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")))
(defun ido-disable-line-trucation () (set (make-local-variable 'truncate-lines) nil))
(add-hook 'ido-minibuffer-setup-hook 'ido-disable-line-trucation)

;; Set the default fill column width to 79.
(setq-default fill-column 79)

;; indentation highlighting
;; (require 'highlight-indentation)

;; enable mustache major mode (for editing mustache templates)
(require 'mustache-mode)

;; set indentation in coffee mode
(defun coffee-custom ()
  (make-local-variable 'tab-width)
  (set 'tab-width 2))
(add-hook 'coffee-mode-hook 'coffee-custom)

;; configure the file extensions used by markdown mode
(setq auto-mode-alist
  (cons '("\\.md" . markdown-mode) auto-mode-alist))
(setq auto-mode-alist
    (cons '("\\.mdown" . markdown-mode) auto-mode-alist))
(setq auto-mode-alist
  (cons '("\\.markdown" . markdown-mode) auto-mode-alist))

;; reduce the number of signals that can trigger the alarm bell
(setq ring-bell-function
      (lambda ()
        (unless (memq this-command
                      '(isearch-abort
                        abort-recursive-edit
                        exit-minibuffer
                        keyboard-quit
                        up down
                        previous-line next-line
                        backward-char forward-char
                        mwheel-scroll))
          (ding))))


;; display trailing whitespace
(setq-default show-trailing-whitespace t)

;; automatically delete trailing whitespace
(add-hook 'write-file-hooks 'delete-trailing-whitespace)

;; do not scroll dramatically when moving one line at a time
(setq-default scroll-conservatively 1)

;; Enable the menu bar
(menu-bar-mode t)

;; Show column numbers
(global-linum-mode 1)
(setq word-wrap t)

;; control + u for page up
(define-key evil-motion-state-map (kbd "C-u") 'evil-scroll-page-up)

;;; esc quits
(define-key evil-normal-state-map [escape] 'keyboard-quit)
(define-key evil-visual-state-map [escape] 'keyboard-quit)
(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)


;; leader keybinds
(evil-leader/set-key
    ";" 'previous-buffer)
