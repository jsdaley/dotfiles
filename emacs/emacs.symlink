;; -*- mode: emacs-lisp -*-

;; set up marmalade as package manager
(require 'package)
(add-to-list 'package-archives
		'("marmalade" . "http://marmalade-repo.org/packages/") t)
;; add MELPA to list of repos
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)
(package-initialize)
(when (not package-archive-contents)
    (package-refresh-contents))

;; Add in your own as you wish:
(defvar my-packages
  '(starter-kit
    multi-term
    color-theme
    color-theme-solarized
    coffee-mode
    markdown-mode
    js2-mode
    evil
    evil-leader
    scss-mode
    )
  "A list of packages to ensure are installed at launch.")

;; local plugins go in /plugins
(add-to-list 'load-path "~/.emacs.d/plugins")

;; local plugins
(require 'dirtree)
(require 'find-things-fast)

(dolist (p my-packages)
    (when (not (package-installed-p p))
          (package-install p)))

;; no bg
(set-background-color nil)


;; clear in eshell clears buffer
(defun eshell/clear ()
    "04Dec2001 - sailor, to clear the eshell buffer."
      (interactive)
        (let ((inhibit-read-only t))
	      (erase-buffer)))

;; boot up solarized theme
(require 'color-theme)
(color-theme-initialize)
(color-theme-solarized-dark)

(set-display-table-slot standard-display-table 'wrap ?\ )

;; Reduce the number of signals that can trigger the alarm bell
(setq ring-bell-function
      (lambda ()
        (unless (memq this-command
                      '(isearch-abort
                        abort-recursive-edit
                        exit-minibuffer
                        keyboard-quit
                        up down
                        previous-line next-line
                        backward-char forward-char
                        mwheel-scroll))
          (ding))))

;; Disable the visible notification (note: this seems to activate the audible
;; bell).
(setq visible-bell nil)

;; use a small font size for MBP Retina
(set-face-attribute 'default nil :height 150)
;; (set-face-attribute 'default nil :font "Menlo for Powerline")

;; display ido results vertically, rather than horizontally.
(setq ido-decorations (quote ("\n-> " "" "\n   " "\n   ..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")))
(defun ido-disable-line-trucation () (set (make-local-variable 'truncate-lines) nil))
(add-hook 'ido-minibuffer-setup-hook 'ido-disable-line-trucation)

;; set indentation in coffee mode
(defun coffee-custom ()
    (make-local-variable 'tab-width)
      (set 'tab-width 2))
(add-hook 'coffee-mode-hook 'coffee-custom)

;; VIM specific things...
;; ======================

;; evil things...

;; init evil
(require 'evil)
(evil-mode 1)
(require 'evil-leader)

;; unmap default keybind for ';'
(define-key evil-motion-state-map ";" nil)

;; set leader to ';'
(setq evil-leader/leader ";"
      evil-leader/in-all-states t)

;; control + u for page up
(define-key evil-motion-state-map (kbd "C-u") 'evil-scroll-up)

;; escape quits all of the things
(define-key evil-normal-state-map [escape] 'keyboard-quit)
(define-key evil-visual-state-map [escape] 'keyboard-quit)
(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)


(global-set-key (kbd "C-c ;") 'evil-normal-state)
(global-set-key (kbd "C-c o") 'tree-mode-toggle-expand)
